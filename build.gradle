import java.text.SimpleDateFormat

plugins {
    id "org.asciidoctor.jvm.convert" version "3.0.0"
    id "org.asciidoctor.jvm.epub" version "3.0.0"
    id "org.asciidoctor.jvm.pdf" version "3.0.0"
    id "org.ajoberstar.git-publish" version "2.1.3"
    id 'org.ajoberstar.grgit' version '4.0.1'
    id 'org.asciidoctor.jvm.gems' version '3.0.0'
    id 'java'
    id 'idea'
}


repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
//    maven {
//        url  "http://dl.bintray.com/puravida-software/repo"
//    }
    jcenter()
    ruby.gems()
}


def buildDirectory = "$buildDir/asciidoc/docs"
def sourceDirectory = "src/docs/asciidoc"


dependencies {
    compile 'org.asciidoctor:asciidoctorj:2.2.0'
    compile 'org.asciidoctor:asciidoctorj-diagram:2.0.0'
    asciidoctorGems 'rubygems:pygments:1.2.1'
//    asciidoctorGems 'rubygems:asciidoctor-revealjs:1.1.3'
//    compile "com.puravida.asciidoctor:asciidoctor-extensions:2.3.0"
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: "org.ajoberstar.git-publish"
apply plugin: 'org.ajoberstar.grgit'

asciidoctorj {
    version = '2.2.0'
    modules {
        diagram.version '2.0.0'
    }
}

pdfThemes {
//    local 'custom-mts-theme', {
//        styleDir = file("themes/meltsan")
//        styleName = 'mts-theme'
//    }
    github 'corporate-theme.yml', {
        organisation = 'fwilhe2'
        repository = 'corporate-theme'
        relativePath = 'resources/themes'

        branch = 'master'
        tag = '1.0.1'
        commit = '7dcb01d6163296c32ba2f4030c0c147f45811981'
    }
}


asciidoctorPdf {
//    fontsDir = ''
//    theme = 'chronicles'
//    dependsOn asciidoctorGemsPrepare
//    inProcess OUT_OF_PROCESS
    logDocuments true
//    languages 'es'
//    dependsOn asciidoctorGemsPrepare
    baseDirFollowsSourceDir()
    sourceDir file(sourceDirectory)
    outputDir file(buildDirectory)

    asciidoctorj {
//        requires 'pygments'
        attributes 'source-highlighter' : 'rouge'
    }

    attributes 'build-gradle': file('build.gradle'),
            'endpoint-url': 'http://example.org',
//            'source-highlighter': 'pretify',
            'source-highlighter': 'rouge',
            'toc': 'right',
//            'toc': 'left',
            'doctype': 'book',
//            'doctype': 'manpage',
//            'organization': 'Meltsan Solutions',
            'icons': 'font',
            'setanchors': '',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': '',
            'allow-uri-read': true,
//            'experimental': '',
//            'reproducible': '',
            'listing-caption': 'Listing',
            'sectnums': '',
            'toclevels': '4',
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'outdir': outputDir.absolutePath,
            'buildDate': new SimpleDateFormat("dd-MMMM-yyyy HH:mm:ss").format(new Date()),
            'project-version': "$version"
}

// asciidoctorj { 
//     // options doctype: 'book', ruby: 'erubis'
//     attributes 'source-highlighter': 'pretify'
// }


asciidoctor {
    baseDirFollowsSourceDir()
    sourceDir file(sourceDirectory)
    outputDir file(buildDirectory)
    logDocuments true

    asciidoctorj {
//        requires 'pygments'
        attributes 'source-highlighter' : 'rouge'
    }

    attributes 'build-gradle': file('build.gradle'),
            'endpoint-url': 'http://example.org',
            'source-highlighter': 'rouge',
            'toc': 'left',
            'icons': 'font',
			'doctype': 'book',
            'setanchors': '',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': '',
            'numbered': '',
            'allow-uri-read': true,
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'outdir': outputDir.absolutePath,
            'buildDate': new SimpleDateFormat("dd-MMMM-yyyy HH:mm:ss").format(new Date()),
            'project-version': "$version"
}


gitPublish {
    println("*** Publish from -> $$buildDir/docs")
    repoUri = gitHubRepoUri
    branch = pagesBranch

// def buildDirectory = "$buildDir/asciidoc/docs"
// def sourceDirectory = "src/docs/asciidoc"
    repoDir = file("$buildDir/docs")

    contents {
        from "$buildDirectory"
        into "."
    }

    commitMessage = "Publish documentation for ${project.group}:${project.name}:$version"
}

gitPublishPush.dependsOn asciidoctor
// gitPublishPush.shouldRunAfter clean, asciidoctor, build
task renderAll(dependsOn: [asciidoctor, asciidoctorPdf])


